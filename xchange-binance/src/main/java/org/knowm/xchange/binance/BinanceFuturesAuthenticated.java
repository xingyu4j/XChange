package org.knowm.xchange.binance;

import org.knowm.xchange.binance.dto.BinanceException;
import org.knowm.xchange.binance.dto.account.BinanceFuturesAccountInformation;
import org.knowm.xchange.binance.dto.account.BinanceFuturesBalance;
import org.knowm.xchange.binance.dto.trade.*;
import si.mazi.rescu.ParamsDigest;
import si.mazi.rescu.SynchronizedValueFactory;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;

/**
 * 需要认证的接口
 *
 * @author xingyu
 */
@Path("")
@Produces(MediaType.APPLICATION_JSON)
public interface BinanceFuturesAuthenticated extends BinanceFutures {

    String SIGNATURE = "signature";
    String X_MBX_APIKEY = "X-MBX-APIKEY";

    /**
     * 下单 (TRADE)
     *
     * @param symbol           YES	交易对
     * @param side             YES	买卖方向 SELL, BUY
     * @param positionSide     NO	持仓方向，单向持仓模式下非必填，默认且仅可填BOTH;在双向持仓模式下必填,且仅可选择 LONG 或 SHORT
     * @param type             YES	订单类型 LIMIT, MARKET, STOP, TAKE_PROFIT, STOP_MARKET, TAKE_PROFIT_MARKET, TRAILING_STOP_MARKET
     * @param timeInForce      NO	有效方法
     * @param quantity         NO	下单数量,使用closePosition不支持此参数。
     * @param price            NO	委托价格
     * @param newClientOrderId NO	用户自定义的订单号，不可以重复出现在挂单中。如空缺系统会自动赋值
     * @param stopPrice        NO	触发价, 仅 STOP, STOP_MARKET, TAKE_PROFIT, TAKE_PROFIT_MARKET 需要此参数
     * @return 下单
     * @throws IOException      IOException
     * @throws BinanceException BinanceException
     */
    @POST
    @Path("fapi/v1/order")
    BinanceFuturesNewOrder newOrder(
            @FormParam("symbol") String symbol,
            @FormParam("side") OrderSide side,
            @FormParam("positionSide") PositionSide positionSide,
            @FormParam("type") OrderType type,
            @FormParam("quantity") BigDecimal quantity,
            @FormParam("price") BigDecimal price,
            @FormParam("newClientOrderId") String newClientOrderId,
            @FormParam("stopPrice") BigDecimal stopPrice,
            @FormParam("timeInForce") TimeInForce timeInForce,
            @FormParam("recvWindow") Long recvWindow,
            @FormParam("timestamp") SynchronizedValueFactory<Long> timestamp,
            @HeaderParam(X_MBX_APIKEY) String apiKey,
            @QueryParam(SIGNATURE) ParamsDigest signature)
            throws IOException, BinanceException;

    /**
     * 测试下单 (TRADE)
     * 用于测试订单请求，但不会提交到撮合引擎
     *
     * @param symbol           交易对
     * @param side             买卖方向 SELL, BUY
     * @param type             订单类型 LIMIT, MARKET, STOP, TAKE_PROFIT, STOP_MARKET, TAKE_PROFIT_MARKET, TRAILING_STOP_MARKET
     * @param timeInForce
     * @param quantity
     * @param price
     * @param newClientOrderId 可选,, a unique id for the order. Automatically generated by
     *                         default.
     * @param stopPrice        可选,, used with STOP orders
     * @param icebergQty       可选, used with icebergOrders
     * @param recvWindow       可选,
     * @param timestamp
     * @return Object
     * @throws IOException      IOException
     * @throws BinanceException BinanceException
     */
    @POST
    @Path("fapi/v1/order/test")
    // TODO 待修改
    Object testNewOrder(
            @FormParam("symbol") String symbol,
            @FormParam("side") OrderSide side,
            @FormParam("type") OrderType type,
            @FormParam("timeInForce") TimeInForce timeInForce,
            @FormParam("quantity") BigDecimal quantity,
            @FormParam("price") BigDecimal price,
            @FormParam("newClientOrderId") String newClientOrderId,
            @FormParam("stopPrice") BigDecimal stopPrice,
            @FormParam("icebergQty") BigDecimal icebergQty,
            @FormParam("recvWindow") Long recvWindow,
            @FormParam("timestamp") SynchronizedValueFactory<Long> timestamp,
            @HeaderParam(X_MBX_APIKEY) String apiKey,
            @QueryParam(SIGNATURE) ParamsDigest signature)
            throws IOException, BinanceException;


    /**
     * 查询订单 (USER_DATA)
     * 查询订单状态。
     *
     * @param symbol            交易对
     * @param orderId           可选,
     * @param origClientOrderId 可选,
     * @param recvWindow        可选, 赋值不得大于 60000
     * @param timestamp
     * @param apiKey
     * @param signature
     * @return BinanceOrder
     * @throws IOException      IOException
     * @throws BinanceException BinanceException
     */
    @GET
    @Path("fapi/v1/order")
    BinanceFuturesOrder orderStatus(
            @QueryParam("symbol") String symbol,
            @QueryParam("orderId") long orderId,
            @QueryParam("origClientOrderId") String origClientOrderId,
            @QueryParam("recvWindow") Long recvWindow,
            @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
            @HeaderParam(X_MBX_APIKEY) String apiKey,
            @QueryParam(SIGNATURE) ParamsDigest signature)
            throws IOException, BinanceException;

    /**
     * 撤销订单 (TRADE)
     * 取消有效订单。
     *
     * @param symbol            交易对
     * @param orderId           可选,
     * @param origClientOrderId 可选,
     * @param recvWindow        可选,
     * @param timestamp
     * @param apiKey
     * @param signature
     * @return BinanceCancelledOrder
     * @throws IOException      IOException
     * @throws BinanceException BinanceException
     */
    @DELETE
    @Path("fapi/v1/order")
    BinanceFuturesCancelledOrder cancelOrder(
            @QueryParam("symbol") String symbol,
            @QueryParam("orderId") long orderId,
            @QueryParam("origClientOrderId") String origClientOrderId,
            @QueryParam("recvWindow") Long recvWindow,
            @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
            @HeaderParam(X_MBX_APIKEY) String apiKey,
            @QueryParam(SIGNATURE) ParamsDigest signature)
            throws IOException, BinanceException;

    /**
     * 撤销全部订单 (TRADE)
     *
     * @param symbol     交易对
     * @param recvWindow 可选,
     * @param timestamp
     * @return List<BinanceCancelledOrder>
     * @throws IOException      IOException
     * @throws BinanceException BinanceException
     */
    @DELETE
    @Path("fapi/v1/allOpenOrders")
    List<BinanceFuturesCancelledOrder> cancelAllOpenOrders(
            @QueryParam("symbol") String symbol,
            @QueryParam("recvWindow") Long recvWindow,
            @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
            @HeaderParam(X_MBX_APIKEY) String apiKey,
            @QueryParam(SIGNATURE) ParamsDigest signature)
            throws IOException, BinanceException;


    /**
     * 当前挂单 (USER_DATA)
     * 获取交易对的所有当前挂单， 请小心使用不带交易对参数的调用。
     *
     * @param symbol     交易对 可选,
     * @param recvWindow 可选,
     * @param timestamp
     * @return List<BinanceOrder>
     * @throws IOException      IOException
     * @throws BinanceException BinanceException
     */
    @GET
    @Path("fapi/v1/openOrder")
    List<BinanceFuturesOrder> openOrders(
            @QueryParam("symbol") String symbol,
            @QueryParam("recvWindow") Long recvWindow,
            @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
            @HeaderParam(X_MBX_APIKEY) String apiKey,
            @QueryParam(SIGNATURE) ParamsDigest signature)
            throws IOException, BinanceException;


    /**
     * 查询所有订单 (USER_DATA)
     * 获取所有帐户订单； 有效，已取消或已完成。
     * <p>
     * 如设置 orderId , 订单量将 >= orderId。否则将返回最新订单。
     * 一些历史订单 cummulativeQuoteQty < 0, 是指数据此时不存在。
     *
     * @param symbol     交易对
     * @param orderId    可选,
     * @param limit      可选,
     * @param recvWindow 可选,
     * @param timestamp
     * @param apiKey
     * @param signature
     * @return
     * @throws IOException      IOException
     * @throws BinanceException BinanceException
     */
    @GET
    @Path("fapi/v1/allOrders")
    List<BinanceFuturesOrder> allOrders(
            @QueryParam("symbol") String symbol,
            @QueryParam("orderId") Long orderId,
            @QueryParam("limit") Integer limit,
            @QueryParam("recvWindow") Long recvWindow,
            @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
            @HeaderParam(X_MBX_APIKEY) String apiKey,
            @QueryParam(SIGNATURE) ParamsDigest signature)
            throws IOException, BinanceException;

    /**
     * 账户余额V2 (USER_DATA)
     *
     * @param recvWindow 可选,
     * @param timestamp
     * @return
     * @throws IOException      IOException
     * @throws BinanceException BinanceException
     */
    @GET
    @Path("fapi/v2/balance")
    BinanceFuturesBalance balance(
            @QueryParam("recvWindow") Long recvWindow,
            @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
            @HeaderParam(X_MBX_APIKEY) String apiKey,
            @QueryParam(SIGNATURE) ParamsDigest signature)
            throws IOException, BinanceException;

    /**
     * 账户信息 (USER_DATA)
     *
     * @param recvWindow 可选,
     * @param timestamp
     * @return
     * @throws IOException      IOException
     * @throws BinanceException BinanceException
     */
    @GET
    @Path("fapi/v2/account")
    BinanceFuturesAccountInformation account(
            @QueryParam("recvWindow") Long recvWindow,
            @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
            @HeaderParam(X_MBX_APIKEY) String apiKey,
            @QueryParam(SIGNATURE) ParamsDigest signature)
            throws IOException, BinanceException;

}
